//go:build ignore

/*
usage:

	go run maketables.go >kanji.go
*/
package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
)

const (
	url = "http://encoding.spec.whatwg.org/index-jis0208.txt"

	// Maximum encodable kanji is:
	//   ku, ten:    86, 33
	//   Shift-JIS:  hi = (ku+0x181)/2 = 0xeb  lo = ten+0x9e = 0xbf
	//   QR kanji:   (hi&^0xc0-1)*c0 + (lo-0x40) = 0x1fff
	//   index:      (ku-1)*94 + (ten-1) = 8022
	maxQR    = 0x1fff
	maxIndex = maxQR - maxQR/0xc0*4 - (maxQR>>6%3+1)>>1
)

func makeTable(r io.Reader) {
	var mapping [1 << 11]uint32
	scanner := bufio.NewScanner(r)
	for scanner.Scan() {
		s := strings.TrimSpace(scanner.Text())
		if s == "" || s[0] == '#' {
			continue
		}
		f := strings.Fields(s)
		if len(f) < 2 {
			continue
		}
		k, err := strconv.ParseUint(f[0], 0, 16)
		if err != nil || k > maxIndex {
			continue
		}
		n, err := strconv.ParseUint(f[1], 0, 16)
		if err != nil || n >= 0x10000 {
			continue
		}
		mapping[n/32] |= 1 << (n & 31)
	}
	if scanner.Err() != nil {
		log.Fatalln(scanner.Err())
	}
	fmt.Print(`// generated by go run maketables.go; DO NOT EDIT

package coding

// Unicode code points for JIS X 0208 characters up to ku-ten 86-33.
var jis0208qr = [2048]uint32{
`)
	for i, v := range mapping {
		if i&3 == 0 {
			fmt.Print("\t")
		}
		fmt.Printf("%#08x, ", v)
		if 3&^i == 0 {
			u := i &^ 3 << 5
			fmt.Printf("// %04x-%04x\n", u, u|0x7f)
		}
	}
	fmt.Println("}")
}

func main() {
	res, err := http.Get(url)
	if err != nil {
		log.Fatalf("%q: Get: %v", url, err)
	}
	defer res.Body.Close()
	makeTable(res.Body)
}
